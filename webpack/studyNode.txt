1.代码分割的概念:
    当一个模块引入其他模块时打包后的文件体积会比较大，在生产环境（production）模式下，webpack会压缩代码 把打包后的代码体积变小 并且启动代码分割 
    将代码分成多个文件打包 优化js文件的加载时间 提升用户体验
2.webpack的配置文件中 主要包括四块
  2.1 entry 定义入口文件 
        支持字符串: entry: './index.js'
        支持数组： entry: ['./index.js', './other.js'], 尽管入口文件有多个 但是打包出的还是一个文件 因为出口只有一个
        支持对象： entry: {'main': './index.js', 'other': './other.js'}, 能打包出多个文件 前提是output中filename要设计成动态的
        output: {filename: '[name].js', path: ...} 这样就能够根据entry中起的名字打包出多个js文件
  2.2 output 定义文件打包后存放的位置
  2.3 module 定义规则 loaders
  2.4 plugins 定义插件
3.零碎知识
  3.1 webpack最后生成的自执行函数中 有很多自定义的函数 目的就在于解决浏览器支持的问题，这就导致webpack不适合构建一些库(冗余代码太多)
  3.2 webpack能用他强大的编译能力提升开发效率 比较适合构建工程
  3.3 spa 和 ssr 的对比
    3.3.1 spa的优点和缺点
          优点：
            1.更好的用户体验：因为spa单页面应用是通过前端路由实现，并且通过局部渲染来渲染页面，不需要再跟后端请求页面并且重新渲染，这样使得网站的整体流畅度变高
            2.减轻了服务器的压力：完全的前后端分离 服务器不用再返回页面 后端也不用再关心前端的处理 只需要返回数据即可
          缺点：
            1.对SEO不友好：因为单页面应用的页面内容都是通过js填充到模板上实现的
            2.对前端开发不友好：前后端分离似的前端页面的复杂度更高，逻辑更复杂 增加了前端的开发成本
            3.首屏加载变慢： 在不采取优化措施 例如路由懒加载 组件懒加载的情况下 在首次渲染的时候 会把所有组件全部渲染出来 就会导致首次加载的速度特别慢
    3.3.2 ssr的优点和缺点
          优点： 能够解决seo的问题
          缺点： 势必会增加服务器的负担 有可能需要和后端进行重构
4.hash chunkhash contenthash 三者之间的区别
  hash: 只要项目中有一个文件发生修改 那么所有文件的hash值都会发生变化 用户的缓存就没有用了 降低用户体验
  chunkhash: 项目中如果有一个文件发生修改 那么只有发生修改的文件还有依赖这个文件的文件的hash值发生变化 有利于做缓存
  contenthash: 抽离css文件时或者在js文件中引入css文件时需要用到 等同于chunkhash

5.在目前的项目中 require进来的css文件能起作用 但是import进来的css文件就不起作用 需要明天再进行研究
  

